// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String   @unique
  password     String
  role         Role     @default(USER)
  isVerified   Boolean  @default(false)
  verifiedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  regionId String?
  region   Region? @relation(fields: [regionId], references: [id], onDelete: SetNull)

  phenomena     Phenomenon[]
  catatanSurvei CatatanSurvei[]

  @@map("users")
}

model SurveyCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  periodeSurvei String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  phenomena     Phenomenon[]
  catatanSurvei CatatanSurvei[]

  @@map("survey_categories")
}


model Region {
  id          String   @id @default(cuid())
  province    String
  city        String
  regionCode  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users         User[]
  phenomena     Phenomenon[]
  catatanSurvei CatatanSurvei[]

  @@map("regions")
}

model Phenomenon {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String
  category   SurveyCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  regionId   String
  region     Region @relation(fields: [regionId], references: [id], onDelete: Cascade)

  analysisResults AnalysisResult[]

  // Performance indexes for insight generation
  @@index([categoryId, regionId])
  @@index([createdAt])
  @@index([userId])
  @@map("phenomena")
}

model AnalysisResult {
  id           String      @id @default(cuid())
  analysisType AnalysisType
  results      Json
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  phenomenonId        String?
  phenomenon          Phenomenon?     @relation(fields: [phenomenonId], references: [id], onDelete: Cascade)
  catatanSurveiId     String?
  catatanSurvei       CatatanSurvei?  @relation(fields: [catatanSurveiId], references: [id], onDelete: Cascade)
  scrappingBeritaId   String?
  scrappingBerita     ScrappingBerita? @relation(fields: [scrappingBeritaId], references: [id], onDelete: Cascade)

  @@map("analysis_results")
}

model CatatanSurvei {
  id             String   @id @default(cuid())
  nomorResponden Int      // Nomor urut responden dalam survei (integer)
  respondenId    String   // Auto-generated: "${categoryId}-${nomorResponden}"
  catatan        String   @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  regionId   String
  region     Region @relation(fields: [regionId], references: [id], onDelete: Cascade)
  categoryId String
  category   SurveyCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId     String
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)

  analysisResults AnalysisResult[]

  // Unique constraint untuk mencegah duplikasi responden
  @@unique([categoryId, nomorResponden])
  // Performance indexes for insight generation
  @@index([categoryId, regionId])
  @@index([createdAt])
  @@map("catatan_survei")
}

enum Role {
  ADMIN
  USER
}

enum AnalysisType {
  DESCRIPTIVE_STATS
  TREND_ANALYSIS
  CONTENT_ANALYSIS
  THEMATIC_ANALYSIS
  CORRELATION_ANALYSIS
  SURVEY_NOTE_ANALYSIS
  NEWS_SCRAPING_ANALYSIS
  FENOMENA_INSIGHTS
  CORRELATION_MATRIX
}

// News Scraping Models (Independent)
model ScrappingKeyword {
  id          String   @id @default(cuid())
  keyword     String   @unique
  isActive    Boolean  @default(true)
  category    String?  // Optional grouping (e.g., "ekonomi", "trend", etc)
  description String?  // Optional description
  matchCount  Int      @default(0) // Statistics tracking
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("scrapping_keywords")
}

model ScrappingBerita {
  id              String   @id @default(cuid())
  idBerita        String   @unique // Unique identifier for the news
  portalBerita    String   // News portal source
  linkBerita      String   // URL to the original news
  judul           String   // News title
  isi             String   @db.Text // News content
  tanggalBerita   DateTime // Original news date
  tanggalScrap    DateTime @default(now()) // Scraping timestamp
  matchedKeywords String[] // Array of keywords that matched
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Optional relation to analysis results for future integration
  analysisResults AnalysisResult[]

  // Performance indexes for insight generation
  @@index([tanggalBerita])
  @@index([matchedKeywords])
  @@index([judul])
  @@index([portalBerita])
  @@map("scrapping_berita")
}